/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package View;
import java.text.SimpleDateFormat;
import Classes.Emprestimo;
import Controller.ControllerEmprestimo;
import java.awt.Point;
import java.util.ArrayList;
import javax.swing.table.DefaultTableModel;

/**Classe para a criação da tela de visualizar emprestimos.
 * @author Kyllder
 * @author Thiago
 * @author Pedro
 * @version 1.0
 */
public class TelaVisualizarEmprestimos extends javax.swing.JFrame {
    /**Um objeto do Controller de Emprestimo.
     *@see ControllerEmprestimo*/
    private ControllerEmprestimo ce = new ControllerEmprestimo();
    /**Um ArrayList que armazenas todos os Emprestimos*/
    private ArrayList<Emprestimo> array =null;
    /**Um objeto do default table model, relacionado a tabela.
     *@see DefaultTableModel*/
    private DefaultTableModel dtm =null;
   /**
     * Construtor da classe, onde são inicializados todos os componentes da tela
     * e onde são adicionados os dados da tabela 
     */
    public TelaVisualizarEmprestimos() {
        initComponents();
        dtm = (DefaultTableModel)Tabela.getModel();
        SimpleDateFormat sdf = new SimpleDateFormat("dd/MM/yyyy");
        array=ce.ListarN();
        if (!array.isEmpty()) {     
            for (Emprestimo aux: array) {
            String a[]={aux.getNomeUser(),aux.getNomeObra(),aux.getNomeAdmin(),sdf.format(aux.getDtEmp().getTime()),null,sdf.format(aux.getDtPrevista().getTime())};
            dtm.addRow(a);
        }
        }  
        ArrayList<Emprestimo> teste =null;
        teste=ce.ListarD();
        if (!teste.isEmpty()) {     
            for (Emprestimo aux: teste) {
            array.add(aux);
            String a[]={aux.getNomeUser(),aux.getNomeObra(),aux.getNomeAdmin(),sdf.format(aux.getDtEmp().getTime()),sdf.format(aux.getDtReal().getTime()),sdf.format(aux.getDtPrevista().getTime())};
            dtm.addRow(a);
        }
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane2 = new javax.swing.JScrollPane();
        Tabela = new javax.swing.JTable();
        txtBuscar = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        Tabela.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Cliente", "Obra", "Admin", "Data de Emprestimo", "Data Real", "Data Prevista"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        Tabela.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseMoved(java.awt.event.MouseEvent evt) {
                TabelaMouseMoved(evt);
            }
        });
        Tabela.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                TabelaMouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(Tabela);

        txtBuscar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtBuscarActionPerformed(evt);
            }
        });
        txtBuscar.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtBuscarKeyReleased(evt);
            }
        });

        jLabel4.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagens/magnifier.png"))); // NOI18N
        jLabel4.setText("Procurar");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 884, Short.MAX_VALUE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addGap(30, 30, 30)
                .addComponent(jLabel4)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(txtBuscar, javax.swing.GroupLayout.PREFERRED_SIZE, 769, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtBuscar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel4))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 529, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents
/**
     *  Método Não faz nada foi, gerado sem querer
     * 
     */
    private void TabelaMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_TabelaMouseClicked

    }//GEN-LAST:event_TabelaMouseClicked
/**
     *  Método Não faz nada foi, gerado sem querer
     * 
     */
    private void txtBuscarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtBuscarActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtBuscarActionPerformed
/**
     * Método que atualiza a tabela de Emprestimo a cada vez que o campo de texto é alterado
     * @param evt KeyEvent, Ação do Campo de texto ao ser digitado ou apagado algo
     */
    private void txtBuscarKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtBuscarKeyReleased
        dtm =  (DefaultTableModel)Tabela.getModel();
      SimpleDateFormat sdf = new SimpleDateFormat("dd/MM/yyyy");
        if (!txtBuscar.getText().equals("")) {
            dtm.setNumRows(0);
            
            ArrayList<Emprestimo> array1=ce.BuscarN(txtBuscar.getText());
            for (Emprestimo aux : array1) {              
                String a[]={aux.getNomeUser(),aux.getNomeObra(),aux.getNomeAdmin(),sdf.format(aux.getDtEmp().getTime()),null,sdf.format(aux.getDtPrevista().getTime())};
                dtm.addRow(a);
            }
            array1=ce.BuscarD(txtBuscar.getText());
            for (Emprestimo aux : array1) {              
                String a[]={aux.getNomeUser(),aux.getNomeObra(),aux.getNomeAdmin(),sdf.format(aux.getDtEmp().getTime()),sdf.format(aux.getDtReal().getTime()),sdf.format(aux.getDtPrevista().getTime())};
                dtm.addRow(a);
            }

        }else{
            dtm.setNumRows(0);
            for (Emprestimo aux : array) {
                String a[]={aux.getNomeUser(),aux.getNomeObra(),aux.getNomeAdmin(),sdf.format(aux.getDtEmp().getTime()),null,sdf.format(aux.getDtPrevista().getTime())};
                dtm.addRow(a);
            }
        }
    }//GEN-LAST:event_txtBuscarKeyReleased
/**
     * Método que cria o comentario dos valores da tabela de Emprestimo
     * @param evt MouseEvent, ação de mover o mouse pela tabela
     */
    private void TabelaMouseMoved(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_TabelaMouseMoved
        Point p = evt.getPoint(); 
        int row = Tabela.rowAtPoint(p);
        int column = Tabela.columnAtPoint(p);
        Tabela.setToolTipText(String.valueOf(dtm.getValueAt(row,column)));
    }//GEN-LAST:event_TabelaMouseMoved


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTable Tabela;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTextField txtBuscar;
    // End of variables declaration//GEN-END:variables
}
